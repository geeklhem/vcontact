#!/usr/bin/env python
"""vContact-pcs - Copyright 2014 Guilhem Doulcier.

vcontact-pcs is a tool to cluster proteins using MCL. It generates csv
files as output that can directly be used with vcontact. ::

    Output:
        output_contigs.csv
        output_pcs.csv
        output_profiles.csv

See also: vcontact.

This program is ditributed under the term of the GNU General Public
Licence v3 (or later) with ABSOLUTELY NO WARRANTY. This is free
software, and you are welcome to redistribute it.

"""

import logging
import pandas
import os
import argparse

import vcontact.protein_clusters
import vcontact

# Argparse config 
parser = argparse.ArgumentParser(description=__doc__,formatter_class=argparse.RawDescriptionHelpFormatter,)
parser.add_argument('output',
                    help='Output basename',
                    type=str)
parser.add_argument('-b','--blast-file',
                    help='Blast results file. Used for generating the profiles. (Ignored if -m is provided)',
                    type=str)
parser.add_argument('-p','--proteins',
                    help='A file linking the protein name (as in the blast file) and the contigs names (csv or tsv)',
                    type=str)
parser.add_argument('-i','--inflation',
                    help='Inflation parameter to define proteins clusters with MCL.',
                    default=2.0,
                    type=float)
parser.add_argument('-v','--verbose',
                    help='Verbosity level : -v warning, -vv info, -vvv debug, (default debug)',
                    action="count",
                    default=-1)
parser.add_argument('-f','--force-overwrite',
                    help='Overwrite existing files',
                    action="store_true")
parser.add_argument('-c','--contigs',
                    help='Contig info (tsv or csv). Required fields are id and proteins',
                    type=str)



args = parser.parse_args()

# Logging config
log_levels = [logging.WARNING,logging.INFO,logging.DEBUG]

logging.addLevelName( logging.WARNING, "\033[1;31m%s\033[1;0m" % logging.getLevelName(logging.WARNING))
logging.addLevelName( logging.ERROR, "\033[1;41m%s\033[1;0m" % logging.getLevelName(logging.ERROR))
logging.addLevelName( logging.INFO, "\033[1;42m%s\033[1;0m" % logging.getLevelName(logging.INFO))
logging.addLevelName( logging.DEBUG, "\033[1;43m%s\033[1;0m" % logging.getLevelName(logging.DEBUG))

# create logger with 'spam_application'
logger = logging.getLogger('vcontact')
logger.setLevel(log_levels[args.verbose])
ch = logging.StreamHandler()
ch.setLevel(log_levels[args.verbose])
ch.setFormatter(logging.Formatter('%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(ch)


def main(args):
    # Load the proteins <-> contigs associations...
    proteins = pandas.read_csv(args.proteins,sep=None)
    logger.debug("Read {} proteins from {}.".format(len(proteins),args.proteins))
    
    # Run MCL on the blast results... 
    pcs = args.output+"_mcl{}.clusters".format(int(args.inflation*10))
    if not os.path.exists(pcs) or args.overwrite:
        pcs = vcontact.protein_clusters.make_protein_clusters(args.blast_file,args.output,args.inflation)
    else:
        logger.debug("File {} exists and will be used. Use -f to overwrite.".format(pcs))

    # Load the clusters... 
    proteins, clusters, profiles, contigs = vcontact.protein_clusters.load_clusters(pcs,proteins)

    # Export csv files... 
    logger.info("Saving files...")
    for filename,df in [("proteins",proteins),("contigs",contigs),("pcs",clusters)]:
        filename = "{}_{}.csv".format(args.output,filename)
        if not os.path.exists(filename) or args.overwrite:
            df.set_index("id").to_csv(filename)
        else:
            logger.debug("File {} exists and will be used. Use -f to overwrite.".format(filename))

    filename = "{}_profiles.csv".format(args.output)
    if not os.path.exists(filename) or args.overwrite:
        profiles.to_csv(args.output+"_profiles.csv",index=False)
    else:
        logger.debug("File {} exists and will be used. Use -f to overwrite.".format(filename))

if __name__ == "__main__":
    print("\n{:=^80}\n".format("This is vcontact-pcs {}".format(vcontact.__version__)))
    main(args)
